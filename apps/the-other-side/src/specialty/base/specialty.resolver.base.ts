/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateSpecialtyArgs } from "./CreateSpecialtyArgs";
import { UpdateSpecialtyArgs } from "./UpdateSpecialtyArgs";
import { DeleteSpecialtyArgs } from "./DeleteSpecialtyArgs";
import { SpecialtyCountArgs } from "./SpecialtyCountArgs";
import { SpecialtyFindManyArgs } from "./SpecialtyFindManyArgs";
import { SpecialtyFindUniqueArgs } from "./SpecialtyFindUniqueArgs";
import { Specialty } from "./Specialty";
import { DoctorFindManyArgs } from "../../doctor/base/DoctorFindManyArgs";
import { Doctor } from "../../doctor/base/Doctor";
import { SpecialtyService } from "../specialty.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Specialty)
export class SpecialtyResolverBase {
  constructor(
    protected readonly service: SpecialtyService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Specialty",
    action: "read",
    possession: "any",
  })
  async _specialtiesMeta(
    @graphql.Args() args: SpecialtyCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Specialty])
  @nestAccessControl.UseRoles({
    resource: "Specialty",
    action: "read",
    possession: "any",
  })
  async specialties(
    @graphql.Args() args: SpecialtyFindManyArgs
  ): Promise<Specialty[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Specialty, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Specialty",
    action: "read",
    possession: "own",
  })
  async specialty(
    @graphql.Args() args: SpecialtyFindUniqueArgs
  ): Promise<Specialty | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Specialty)
  @nestAccessControl.UseRoles({
    resource: "Specialty",
    action: "create",
    possession: "any",
  })
  async createSpecialty(
    @graphql.Args() args: CreateSpecialtyArgs
  ): Promise<Specialty> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Specialty)
  @nestAccessControl.UseRoles({
    resource: "Specialty",
    action: "update",
    possession: "any",
  })
  async updateSpecialty(
    @graphql.Args() args: UpdateSpecialtyArgs
  ): Promise<Specialty | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Specialty)
  @nestAccessControl.UseRoles({
    resource: "Specialty",
    action: "delete",
    possession: "any",
  })
  async deleteSpecialty(
    @graphql.Args() args: DeleteSpecialtyArgs
  ): Promise<Specialty | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Doctor], { name: "doctors" })
  @nestAccessControl.UseRoles({
    resource: "Doctor",
    action: "read",
    possession: "any",
  })
  async resolveFieldDoctors(
    @graphql.Parent() parent: Specialty,
    @graphql.Args() args: DoctorFindManyArgs
  ): Promise<Doctor[]> {
    const results = await this.service.findDoctors(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
