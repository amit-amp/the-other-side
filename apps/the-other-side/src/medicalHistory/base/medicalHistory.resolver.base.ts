/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateMedicalHistoryArgs } from "./CreateMedicalHistoryArgs";
import { UpdateMedicalHistoryArgs } from "./UpdateMedicalHistoryArgs";
import { DeleteMedicalHistoryArgs } from "./DeleteMedicalHistoryArgs";
import { MedicalHistoryCountArgs } from "./MedicalHistoryCountArgs";
import { MedicalHistoryFindManyArgs } from "./MedicalHistoryFindManyArgs";
import { MedicalHistoryFindUniqueArgs } from "./MedicalHistoryFindUniqueArgs";
import { MedicalHistory } from "./MedicalHistory";
import { Patient } from "../../patient/base/Patient";
import { MedicalHistoryService } from "../medicalHistory.service";
@graphql.Resolver(() => MedicalHistory)
export class MedicalHistoryResolverBase {
  constructor(protected readonly service: MedicalHistoryService) {}

  async _medicalHistoriesMeta(
    @graphql.Args() args: MedicalHistoryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [MedicalHistory])
  async medicalHistories(
    @graphql.Args() args: MedicalHistoryFindManyArgs
  ): Promise<MedicalHistory[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => MedicalHistory, { nullable: true })
  async medicalHistory(
    @graphql.Args() args: MedicalHistoryFindUniqueArgs
  ): Promise<MedicalHistory | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => MedicalHistory)
  async createMedicalHistory(
    @graphql.Args() args: CreateMedicalHistoryArgs
  ): Promise<MedicalHistory> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        patients: args.data.patients
          ? {
              connect: args.data.patients,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => MedicalHistory)
  async updateMedicalHistory(
    @graphql.Args() args: UpdateMedicalHistoryArgs
  ): Promise<MedicalHistory | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          patients: args.data.patients
            ? {
                connect: args.data.patients,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MedicalHistory)
  async deleteMedicalHistory(
    @graphql.Args() args: DeleteMedicalHistoryArgs
  ): Promise<MedicalHistory | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Patient, {
    nullable: true,
    name: "patients",
  })
  async resolveFieldPatients(
    @graphql.Parent() parent: MedicalHistory
  ): Promise<Patient | null> {
    const result = await this.service.getPatients(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
