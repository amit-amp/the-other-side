/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateDoctorArgs } from "./CreateDoctorArgs";
import { UpdateDoctorArgs } from "./UpdateDoctorArgs";
import { DeleteDoctorArgs } from "./DeleteDoctorArgs";
import { DoctorCountArgs } from "./DoctorCountArgs";
import { DoctorFindManyArgs } from "./DoctorFindManyArgs";
import { DoctorFindUniqueArgs } from "./DoctorFindUniqueArgs";
import { Doctor } from "./Doctor";
import { PatientFindManyArgs } from "../../patient/base/PatientFindManyArgs";
import { Patient } from "../../patient/base/Patient";
import { Specialty } from "../../specialty/base/Specialty";
import { DoctorService } from "../doctor.service";
@graphql.Resolver(() => Doctor)
export class DoctorResolverBase {
  constructor(protected readonly service: DoctorService) {}

  async _doctorsMeta(
    @graphql.Args() args: DoctorCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Doctor])
  async doctors(@graphql.Args() args: DoctorFindManyArgs): Promise<Doctor[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => Doctor, { nullable: true })
  async doctor(
    @graphql.Args() args: DoctorFindUniqueArgs
  ): Promise<Doctor | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Doctor)
  async createDoctor(@graphql.Args() args: CreateDoctorArgs): Promise<Doctor> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        specialty: args.data.specialty
          ? {
              connect: args.data.specialty,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Doctor)
  async updateDoctor(
    @graphql.Args() args: UpdateDoctorArgs
  ): Promise<Doctor | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          specialty: args.data.specialty
            ? {
                connect: args.data.specialty,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Doctor)
  async deleteDoctor(
    @graphql.Args() args: DeleteDoctorArgs
  ): Promise<Doctor | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Patient], { name: "patients" })
  async resolveFieldPatients(
    @graphql.Parent() parent: Doctor,
    @graphql.Args() args: PatientFindManyArgs
  ): Promise<Patient[]> {
    const results = await this.service.findPatients(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Specialty, {
    nullable: true,
    name: "specialty",
  })
  async resolveFieldSpecialty(
    @graphql.Parent() parent: Doctor
  ): Promise<Specialty | null> {
    const result = await this.service.getSpecialty(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
