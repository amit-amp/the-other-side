# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input BooleanNullableFilter {
  equals: Boolean
  not: Boolean
}

input Credentials {
  password: String!
  username: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

type Doctor {
  IsPrivate: Boolean
  PID: Float!
  createdAt: DateTime!
  first_name: String!
  id: String!
  last_name: String!
  patients(orderBy: [PatientOrderByInput!], skip: Float, take: Float, where: PatientWhereInput): [Patient!]!
  specialty: Specialty
  updatedAt: DateTime!
  user: User
}

input DoctorCreateInput {
  IsPrivate: Boolean
  PID: Float!
  first_name: String!
  last_name: String!
  patients: PatientCreateNestedManyWithoutDoctorsInput
  specialty: SpecialtyWhereUniqueInput
  user: UserWhereUniqueInput
}

input DoctorCreateNestedManyWithoutPatientsInput {
  connect: [DoctorWhereUniqueInput!]
}

input DoctorCreateNestedManyWithoutSpecialtiesInput {
  connect: [DoctorWhereUniqueInput!]
}

input DoctorListRelationFilter {
  every: DoctorWhereInput
  none: DoctorWhereInput
  some: DoctorWhereInput
}

input DoctorOrderByInput {
  IsPrivate: SortOrder
  PID: SortOrder
  createdAt: SortOrder
  first_name: SortOrder
  id: SortOrder
  last_name: SortOrder
  specialtyId: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input DoctorUpdateInput {
  IsPrivate: Boolean
  PID: Float
  first_name: String
  last_name: String
  patients: PatientUpdateManyWithoutDoctorsInput
  specialty: SpecialtyWhereUniqueInput
  user: UserWhereUniqueInput
}

input DoctorUpdateManyWithoutPatientsInput {
  connect: [DoctorWhereUniqueInput!]
  disconnect: [DoctorWhereUniqueInput!]
  set: [DoctorWhereUniqueInput!]
}

input DoctorUpdateManyWithoutSpecialtiesInput {
  connect: [DoctorWhereUniqueInput!]
  disconnect: [DoctorWhereUniqueInput!]
  set: [DoctorWhereUniqueInput!]
}

input DoctorWhereInput {
  IsPrivate: BooleanNullableFilter
  PID: IntFilter
  first_name: StringFilter
  id: StringFilter
  last_name: StringFilter
  patients: PatientListRelationFilter
  specialty: SpecialtyWhereUniqueInput
  user: UserWhereUniqueInput
}

input DoctorWhereUniqueInput {
  id: String!
}

input FloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: Float
  notIn: [Float!]
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type MedicalHistory {
  MID: Float!
  createdAt: DateTime!
  id: String!
  name: String
  patients: Patient
  updatedAt: DateTime!
}

input MedicalHistoryCreateInput {
  MID: Float!
  name: String
  patients: PatientWhereUniqueInput
}

input MedicalHistoryOrderByInput {
  MID: SortOrder
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  patientsId: SortOrder
  updatedAt: SortOrder
}

input MedicalHistoryUpdateInput {
  MID: Float
  name: String
  patients: PatientWhereUniqueInput
}

input MedicalHistoryWhereInput {
  MID: IntFilter
  id: StringFilter
  name: StringNullableFilter
  patients: PatientWhereUniqueInput
}

input MedicalHistoryWhereUniqueInput {
  id: String!
}

type MetaQueryPayload {
  count: Float!
}

type Mutation {
  createDoctor(data: DoctorCreateInput!): Doctor!
  createMedicalHistory(data: MedicalHistoryCreateInput!): MedicalHistory!
  createPatient(data: PatientCreateInput!): Patient!
  createSpecialty(data: SpecialtyCreateInput!): Specialty!
  createUser(data: UserCreateInput!): User!
  deleteDoctor(where: DoctorWhereUniqueInput!): Doctor!
  deleteMedicalHistory(where: MedicalHistoryWhereUniqueInput!): MedicalHistory!
  deletePatient(where: PatientWhereUniqueInput!): Patient!
  deleteSpecialty(where: SpecialtyWhereUniqueInput!): Specialty!
  deleteUser(where: UserWhereUniqueInput!): User!
  login(credentials: Credentials!): UserInfo!
  updateDoctor(data: DoctorUpdateInput!, where: DoctorWhereUniqueInput!): Doctor!
  updateMedicalHistory(data: MedicalHistoryUpdateInput!, where: MedicalHistoryWhereUniqueInput!): MedicalHistory!
  updatePatient(data: PatientUpdateInput!, where: PatientWhereUniqueInput!): Patient!
  updateSpecialty(data: SpecialtyUpdateInput!, where: SpecialtyWhereUniqueInput!): Specialty!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

type Patient {
  age: Float!
  birthday: DateTime
  createdAt: DateTime!
  doctors(orderBy: [DoctorOrderByInput!], skip: Float, take: Float, where: DoctorWhereInput): [Doctor!]!
  firstName: String!
  id: String!
  lastName: String!
  medicalHistory: MedicalHistory
  updatedAt: DateTime!
}

input PatientCreateInput {
  Doctors: DoctorCreateNestedManyWithoutPatientsInput
  age: Float!
  birthday: DateTime
  firstName: String!
  lastName: String!
  medicalHistory: MedicalHistoryWhereUniqueInput
}

input PatientCreateNestedManyWithoutDoctorsInput {
  connect: [PatientWhereUniqueInput!]
}

input PatientListRelationFilter {
  every: PatientWhereInput
  none: PatientWhereInput
  some: PatientWhereInput
}

input PatientOrderByInput {
  age: SortOrder
  birthday: SortOrder
  createdAt: SortOrder
  firstName: SortOrder
  id: SortOrder
  lastName: SortOrder
  medicalHistoryId: SortOrder
  updatedAt: SortOrder
}

input PatientUpdateInput {
  Doctors: DoctorUpdateManyWithoutPatientsInput
  age: Float
  birthday: DateTime
  firstName: String
  lastName: String
  medicalHistory: MedicalHistoryWhereUniqueInput
}

input PatientUpdateManyWithoutDoctorsInput {
  connect: [PatientWhereUniqueInput!]
  disconnect: [PatientWhereUniqueInput!]
  set: [PatientWhereUniqueInput!]
}

input PatientWhereInput {
  Doctors: DoctorListRelationFilter
  age: FloatFilter
  birthday: DateTimeNullableFilter
  firstName: StringFilter
  id: StringFilter
  lastName: StringFilter
  medicalHistory: MedicalHistoryWhereUniqueInput
}

input PatientWhereUniqueInput {
  id: String!
}

type Query {
  _doctorsMeta(where: DoctorWhereInput): MetaQueryPayload!
  _medicalHistoriesMeta(where: MedicalHistoryWhereInput): MetaQueryPayload!
  _patientsMeta(where: PatientWhereInput): MetaQueryPayload!
  _specialtiesMeta(where: SpecialtyWhereInput): MetaQueryPayload!
  _usersMeta(where: UserWhereInput): MetaQueryPayload!
  doctor(where: DoctorWhereUniqueInput!): Doctor
  doctors(orderBy: [DoctorOrderByInput!], skip: Float, take: Float, where: DoctorWhereInput): [Doctor!]!
  medicalHistories(orderBy: [MedicalHistoryOrderByInput!], skip: Float, take: Float, where: MedicalHistoryWhereInput): [MedicalHistory!]!
  medicalHistory(where: MedicalHistoryWhereUniqueInput!): MedicalHistory
  patient(where: PatientWhereUniqueInput!): Patient
  patients(orderBy: [PatientOrderByInput!], skip: Float, take: Float, where: PatientWhereInput): [Patient!]!
  specialties(orderBy: [SpecialtyOrderByInput!], skip: Float, take: Float, where: SpecialtyWhereInput): [Specialty!]!
  specialty(where: SpecialtyWhereUniqueInput!): Specialty
  user(where: UserWhereUniqueInput!): User
  userInfo: UserInfo!
  users(orderBy: [UserOrderByInput!], skip: Float, take: Float, where: UserWhereInput): [User!]!
}

enum QueryMode {
  Default
  Insensitive
}

enum SortOrder {
  Asc
  Desc
}

type Specialty {
  SFID: Float!
  createdAt: DateTime!
  description: String
  doctors(orderBy: [DoctorOrderByInput!], skip: Float, take: Float, where: DoctorWhereInput): [Doctor!]!
  field_name: String!
  id: String!
  updatedAt: DateTime!
}

input SpecialtyCreateInput {
  SFID: Float!
  description: String
  doctors: DoctorCreateNestedManyWithoutSpecialtiesInput
  field_name: String!
}

input SpecialtyOrderByInput {
  SFID: SortOrder
  createdAt: SortOrder
  description: SortOrder
  field_name: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

input SpecialtyUpdateInput {
  SFID: Float
  description: String
  doctors: DoctorUpdateManyWithoutSpecialtiesInput
  field_name: String
}

input SpecialtyWhereInput {
  SFID: IntFilter
  description: StringNullableFilter
  doctors: DoctorListRelationFilter
  field_name: StringFilter
  id: StringFilter
}

input SpecialtyWhereUniqueInput {
  id: String!
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

type User {
  createdAt: DateTime!
  doctor: Doctor
  firstName: String
  id: String!
  lastName: String
  roles: JSON!
  updatedAt: DateTime!
  username: String!
}

input UserCreateInput {
  doctor: DoctorWhereUniqueInput
  firstName: String
  lastName: String
  password: String!
  roles: JSON!
  username: String!
}

type UserInfo {
  accessToken: String
  id: String!
  roles: [String!]!
  username: String!
}

input UserOrderByInput {
  createdAt: SortOrder
  doctorId: SortOrder
  firstName: SortOrder
  id: SortOrder
  lastName: SortOrder
  password: SortOrder
  roles: SortOrder
  updatedAt: SortOrder
  username: SortOrder
}

input UserUpdateInput {
  doctor: DoctorWhereUniqueInput
  firstName: String
  lastName: String
  password: String
  roles: JSON
  username: String
}

input UserWhereInput {
  doctor: DoctorWhereUniqueInput
  firstName: StringNullableFilter
  id: StringFilter
  lastName: StringNullableFilter
  username: StringFilter
}

input UserWhereUniqueInput {
  id: String!
}
